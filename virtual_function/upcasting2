/*********************************************************************************
  *@copyright (C)  Sep 2018  San
  *@bug :
  *@reason:
  *@brief:   This is an sample example for upcasting
  *@CMAKE_CXX_STANDARD 17
  *@IDE: Clion 2018.3
  *@OS:  macOS High Sierra 10.13.6
  *
  *@function_lists:
  *  1.

  *@history:
     1.Date:
       Author: san
       Modification:
**********************************************************************************/

#include <iostream>
using namespace std;

enum note { middleC, Csharp, Eflat};  // Etc.

class Instrument {
public:
    virtual void play(note) const = 0; //pure virtual functions
    virtual char* what() const = 0;  // assume this will modify the object
    virtual void adjust(int) = 0;
};

class Wind : public Instrument { // Wind objects are Instruments because they have the same interface
public:
    void play(note) const {  // redifine interface function:
        cout << "Wind::play" << endl;
    }
    char *what() const { return "Wind"; }
    void adjust(int){ }
};

class Percussion : public Instrument {
public:
    void play(note) const {
        cout << "Percussiong::play" << endl;
    }
    char* what() const { return "Percussion"; }
    void adjust(int){ }
};

class Stringed : public Instrument {
public:
    void play(note) const {
        cout << "Stringed::play" << endl;
    }
    char *what() const { return "Stringed"; }
    void adjust(int) { }
};

class Brass : public Wind {
public:
    void play(note) const {
        cout << "Brass::play" << endl;
    }
    char* what() const { return "Brass" ; }
};

class Woodwind : public Wind {
public:
    void play(note) const {

    }
};

void tune(Instrument& i) {  // Identical function from before:
    i.play(middleC);
}

// New function:
void f(Instrument& i) {
    i.adjust(1);
}

int main(int argc, char const *argv[]) {
    Wind flute;  // flute: Wind
    Percussion drum;  // drum: Percussion
    Stringed violin;  // violin: Stringed
    Brass flugelhorn; // flugehorn: Brass
    Woodwind recorder; // recorder: Woodwind
    tune(flute);    // Upcasting
    tune(drum);
    tune(violin);
    tune(flugelhorn);
    tune(recorder);
    f(flugelhorn);
}



Output:
Wind::play
Percussiong::play
Stringed::play
Brass::play
