
 /*********************************************************************************
  *Author:  San
  *IDE: Clion 2018.3
  *OS:  macOS High Sierra 10.13.6
  *Date:  August 1,2018
  *Description:   when you use function pointer, C does not check the correctness of the parameter pass
  *               It makes the program more flexible. This program is about some basic use of function pointer.
  *Bug:          some errors when I use the base pointer(in the end of the program)
  *Function List:
     1.
  *History:
   1.Date:
     Author:
     Modification:
**********************************************************************************/

#include <iostream>
using namespace std;

int (*fptr1) (int); //名为fptr的函数指针  A function pointer named fptr: receive int and return int pointer

int square(int num) {
    return num * num;
}

typedef int (*funcptr)(int);  // Declaring a type definition for a function

int add(int num1, int num2) {
    return num1 + num2;
}

int subtract(int num1, int num2) {
    return num1 - num2;
}

//函数指针数组   用一个字符索引选择对应的函数来执行。
// For example, if there is a * character that represents a multiplication function,
// we can use the character literal as an integer, 128 elements corresponding to the first 128 ASCII characters
typedef int (*fptrOperation)(int,int);  // Declaring a type definition for a function
fptrOperation operations[123] = {NULL};  //this two sentences amounts to
                                        // int (*fptrOperation[123])(int, int) = {NULL};

void initializeOperationArray() {
    operations['+'] = add;
    operations['-'] = subtract;
}

int compute(fptrOperation operation, int num1, int num2) {
    return operation(num1, num2);
}

fptrOperation  select(char opcode) {   // Rerutn function point
    switch(opcode) {
        case '+': return add;
        case '-': return subtract;
    }
}

// evaluate will pass the opcode to the select function above, which returns the function pointer to be executed.
int evaluate(char opcode, int num1, int num2) {  //opcode represents the operation need to be done,
    fptrOperation  operation = select(opcode);
    return operation(num1, num2);
}

 int evaluateArray(char opcode, int num1, int num2) {  // Rewriting of evaluate function
     fptrOperation operation;
     operation = operations[opcode];
     return operation(num1, num2);
 }
 
int main(int argc, char const *argv[]) {
     int n = 5;
     fptr1 = square;    //Call the square function with the function pointer(fptr), the same as " fptr1 = &square; "
                       // use the function name square to return the address of the square function
     cout << fptr1(n) << endl;

     funcptr fptr2;    // It is more convenient to declaring a type definition for a function
     fptr2 = square;
     cout << fptr2(n) << endl;

     //Transfer function pointer    The addresses of add and sub functions are passed to the compute function,
     cout << compute(add,5,6) << endl;  // which uses these addresses to invoke the corresponding operations.
     cout << compute(subtract,5,6) << endl;

     //Test function pointer
     cout << evaluate('+',5,6) << endl;
     cout << evaluate('-',5,6) << endl;

     //Test function pointer array
     initializeOperationArray();
     cout << evaluate('+',6,5) << endl;
     cout << evaluate('-',5,6) << endl;

     // compare function pointer
     fptrOperation fptr3 = add;   // The add function is assigned to the fptr3 function pointer
     if(fptr3 = add) {   // then compare with the address of the add function
         cout << "fptr3 points to add function \n" ;
     } else {
         cout << "fptr3 doen not points to add function \n" ;
     }

     // Conversion function pointer
    typedef int (*fptrToSingleInt)(int);
    typedef int (*fptrToTwoInts)(int,int);
    int add(int, int);
    fptrToTwoInts fptrFirst = add;     // Converting one function pointer to another and back,
    fptrToSingleInt fptrSecond = (fptrToSingleInt)fptrFirst;   // the result is the same as the original pointer,
    fptrFirst = (fptrToTwoInts)fptrSecond;  // but the length of the function pointer is not necessarily the same.
    cout << fptrFirst(5,6) << endl;     //  11

    //waring : There is no guarantee that the function pointer and data pointer will be converted to normal work.
//    void* pv = add;  // wrong! You can't assign function pointers to void* pointers
    typedef void (*fptrBase)(); // fptrBase is a function pointer that does not accept parameters nor return results.
    fptrBase basePointer;   // the use of basepointer, It has the same effect as the above code
    fptrFirst = add;
//    basePointer = (fptrToSingleInt)fptrFirst; // Error error: assigning to 'fptrBase' (aka 'void (*)()') from incompatible
                                              // type 'fptrToSingleInt' (aka 'int (*)(int)'): different number of parameters (0 vs 1)
    fptrFirst = (fptrToTwoInts)basePointer;
    cout << fptrFirst(6,5) << endl;
}

Output:
25
25
11
-1
11
-1
11
-1
fptr3 points to add function 
11

Process finished with exit code 11
