//Reference : https://mp.weixin.qq.com/s/Vq1dpZm2Mx_qeDofOuvObw

/*********************************************************************************
  *Author:  Sanner
  *IDE: Clion 2018.3
  *OS:  macOS High Sierra
  *Processor: 2.2 GHz Intel Core i7
  *Date:  2018-06-18
  *Description:  This file contains the method of heap sort
  *Bug: There is some bug in function HeapSort
  *Others:
  *Function List:
     1.  void Swap(int A[] , int i, int j   -- exchange A[i] and A[j],dtype=int
     2.  void swap1(T&a,T&b)                -- exchange a and b

  *History:  //修改历史记录列表，每条修改记录应包含修改日期、修改者及修改内容简介
     1.Date: 2018/06/18
       Author: sanner
       Modification: Original
     2.Date:
**********************************************************************************/

#include <cstdlib>
#include <iostream>
#include <utility>
using namespace std;

void Swap(int A[] , int i, int j){
    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}

template <typename T>
void swap1(T& a, T& b){
    T c(a);
    a=b;
    b=c;
}

// 数据结构 ---------- 数组

// 最差时间复杂度 ---- O(nlogn)

// 最优时间复杂度 ---- O(nlogn)

// 平均时间复杂度 ---- O(nlogn)

// 所需辅助空间 ------ O(1)

// 稳定性 ------------ 不稳定

//堆排序是不稳定的排序算法，不稳定发生在堆顶元素与A[i]交换的时刻。

//比如序列：{ 9, 5, 7, 5 }，堆顶元素是9，堆排序下一步将9和第二个5进行交换，得到序列 { 5, 5, 7, 9 }，再进行堆调整得到{ 7, 5, 5, 9 }，重复之前的操作最后得到{ 5, 5, 7, 9 }从而改变了两个5的相对次序。

void Heapify(int A[], int i, int size)  // 从A[i]向下进行堆调整

{

    int left_child = 2 * i + 1;         // 左孩子索引

    int right_child = 2 * i + 2;        // 右孩子索引

    int max = i;                        // 选出当前结点与其左右孩子三者之中的最大值

    if (left_child > A[max])

        max = left_child;

    if (right_child >  A[max])

        max = right_child;

    if (max != i)

    {

        Swap(A, i, max);                // 把当前结点和它的最大(直接)子节点进行交换

        Heapify(A, max, size);          // 递归调用，继续从当前结点向下进行堆调整

    }

}



int BuildHeap(int A[], int n)           // 建堆，时间复杂度O(n)

{

    int heap_size = n;

    for (int i = heap_size / 2 - 1; i >= 0; i--) // 从每一个非叶结点开始向下进行堆调整

        Heapify(A, i, heap_size);

    return heap_size;

}



void HeapSort(int A[], int n)

{

    int heap_size = BuildHeap(A, n);    // 建立一个最大堆

    while (heap_size > 1)  // 堆（无序区）元素个数大于1，未完成排序

    {

        // 将堆顶元素与堆的最后一个元素互换，并从堆中去掉最后一个元素

        // 此处交换操作很有可能把后面元素的稳定性打乱，所以堆排序是不稳定的排序算法

        Swap(A, 0, --heap_size);

        Heapify(A, 0, heap_size);     // 从新的堆顶元素开始向下进行堆调整，时间复杂度O(logn)

    }

}



int main()

{

    int A[] = { 5, 2, 9, 4, 7, 6, 1, 3, 8 };// 从小到大堆排序

    int n = sizeof(A) / sizeof(int);

    HeapSort(A, n);

    cout<<"堆排序结果："<<endl;

    for (int i = 0; i<n ; ++i)

    {

        cout<< A[i]<<" ";

    }

    cout<<endl;

    return 0;

}
