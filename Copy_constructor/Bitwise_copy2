
/*********************************************************************************
  *Author:  Sanner
  *IDE: Clion 2018.3
  *OS:  macOS High Sierra 10.13.6
  *Processor: 2.2 GHz Intel Core i7
  *Graphics: Intel Iris Pro 1536 MB
  *Date:  July 29,2018
  *Description: add copy-constructor function to Bitwise_copy.cpp and now the program is right
  *Others:      
  *Function List:
     1.

  *History:  //modify history list, every record should consist the date, Revision and modification content introduction
     1.Date: 7/29/2018
       Author: san
       Modification:  modify the Bitwise_copy.cpp. Add the copy-constructor and the program can be output as expected
     2.Date:
       Author:
       Modification:

**********************************************************************************/

#include <iostream>
#include <fstream>
#include <string>
#include "./cmake-build-debug/Dependency2.h"
namespace s = std;  //alias it
using namespace s;
ofstream out("test.out");

class HowMany {
public:
    HowMany(const string& id = " ") : name(id) {
        ++objectCount;
        print("HowMany constructor ");
    }

    HowMany(const HowMany& h) : name(h.name){  //The invocation of name(h.name) on the initialization table
        // of the constructor is in fact called string copy constructor
        name += " copy";
        ++objectCount;
        print("HowMany(const HowMany&) ");
    }

    void print(const string& msg = " " )
    {
        if(msg.size() != 0) {
            out << msg << ": " << endl;   // object message
        }
        out << '\t' << name << ": "               // object identifier
        << "objectCount = " << objectCount << endl;   // number of the object
    }

    ~HowMany(){
        --objectCount;
        print("~HowMany() ");
    }
private:
    string name;   // Object identifier
    static int objectCount;
};

int HowMany::objectCount = 0;

HowMany f(HowMany a) {          //Pass and return by value:
    a.print("a argument inside f() : ");
    out << "Returning from f() " << endl;
    return a;
}     //局部对象出了其范围，析构函数就被调用，析构函数使objectCount 减小

int main(int argc, char const *argv[]) {
    HowMany h1("h1");
    out << "Entering f() " << endl;
    HowMany h2 = f(h1); // the code processes the return process and places
                        // the result in the destination. The destination address is passed
                        // as a hidden parameter in function body.
    h2.print("h2 after call to f() ");
    out << "Call f(), no return value" << endl;
    f(h1);
    out << "After call to f() " << endl;
}

Output in test.out:
HowMany constructor : 
	h1: objectCount = 1
Entering f() 
HowMany(const HowMany&) : 
	h1 copy: objectCount = 2
a argument inside f() : : 
	h1 copy: objectCount = 2
Returning from f() 
HowMany(const HowMany&) : 
	h1 copy copy: objectCount = 3
~HowMany() : 
	h1 copy: objectCount = 2
h2 after call to f() : 
	h1 copy copy: objectCount = 2
Call f(), no return value
HowMany(const HowMany&) : 
	h1 copy: objectCount = 3
a argument inside f() : : 
	h1 copy: objectCount = 3
Returning from f() 
HowMany(const HowMany&) : 
	h1 copy copy: objectCount = 4
~HowMany() : 
	h1 copy copy: objectCount = 3
~HowMany() : 
	h1 copy: objectCount = 2
After call to f() 
~HowMany() : 
	h1 copy copy: objectCount = 1
~HowMany() : 
	h1: objectCount = 0
