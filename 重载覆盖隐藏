/*********************************************************************************
  *Author:  Sanner
  *IDE: Clion 2018.3
  *OS:  macOS High Sierra
  *Processor: 2.2 GHz Intel Core i7
  *Date:  July 20,2018
  *Description:  This file used to show some difference in Overload（重载）, override(覆盖/改写) and hide（隐藏）
  *Others:
  *Function List:
     1.

  *History:  //modify history list, every record should consist the date, Revision and modification content introduction
     1.Date: July 20,2018
       Author: sanner
       Modification: Original
     2.Date:
       Author: sanner
       Modification:

**********************************************************************************/

#include <boost/timer.hpp>
#include <boost/progress.hpp>

#include <cstdio>
#include <cassert>
#include <cmath>

#include <iostream>
#include <iomanip>
#include <string>
#include <cstring>

using namespace std;
using namespace boost;

class Base {
public:
    virtual void f(float x) { cout << "Base::f(float)" << x << endl; }
    void g(float x) { cout << "Base::g(float)" << x << endl; }

    void h(float x) { cout << "Base::h(float)" << x << endl; }
};

class Derived : public Base{
public:
    virtual void f(float x){ cout<<"derived::f(float)"<<x<<endl; }  //override

    //using Base::g; //显式使用Explicit use "using",可实现跨边界的重载(Overloading across borders)，then output  Base::g(float)3.14
    void g(int x){ cout<<"Derived::g(int)"<<x<<endl; }  //hide not overload(重载）

    void h(float x){ cout<<"Derived::h(float)"<<x<<endl; }   //hide not overlay（覆盖）
};

int main(int argc, char const *argv[]) {
    cout<<__DATE__<<endl;

    Derived d;
    Base *pb = &d;
    Derived *pd = &d;

    pb->f(3.14f);
    pd->f(3.14f);

    pb->g(3.14f);
    pd->g(3.14f);

    pb->h(3.14f);
    pd->h(3.14f);
    return 0;
}


Output:
Jul 20 2018
derived::f(float)3.14
derived::f(float)3.14
Base::g(float)3.14
Derived::g(int)3
Base::h(float)3.14
Derived::h(float)3.14
