/*********************************************************************************
  *@copyright (C)  Sep 2018  San
  *@bug :
  *@brief:   重载全局的new和delete,只是改变了原有的内存分配方法，记住这一点是很重要的。
  * 编译器将用重载的 new 代替默认的版本去分配内存，然后为那个内存调用构造函数。所以，虽然当编译器看到 new 时，编译器分配内存并调用构造函数，但是当重载 new 时，可以改变的只是内存分配部分（ delete 也有相似的限制。）

  *@CMAKE_CXX_STANDARD 17
  *@IDE: Clion 2018.3
  *@OS:  macOS High Sierra 10.13.6
  *
  *@function_lists:
  *  1.

  *@history:
     1.Date:
       Author:
       Modification:
**********************************************************************************/
#include "Tree.h"
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <string>
#include <cstring>

using namespace std;

void *operator new(size_t sz) {    // 重载的new必须有一个size_t参数（sizes的标准C类型）。这个参数由编译器产生并传递给我们，它是要分配内存的对象的长度。必须返回一个指向等于这个长度（或大于这个长度，如果有这样做的原因）的对象的指针，
    // 如果没有找到存储单元（在这种情况下，构造函数不被调用），则返回一个0。然而如果找不到存储单元，不能仅仅返回0
    // ，也许还应该做一些诸如调用new-handler或产生一个异常信息之类的事，通知这里存在问题。
    cout << "operator new functon: " << sz << " Bytes "<< endl;
    void *m = malloc(sz);
    if(!m)puts("out of memory");
    return m;
}

void operator delete(void* m) {
    puts("operator delete function ");
    free(m);
}

class S {
public:
    S() { puts("S::S() ");  }
    ~S() { puts("S::~S() "); }
private:
    int i;
};
int main( )
{
    puts(" creating & destroying an int ");
    int *p = new int(47);
    delete p;
    puts(" crating & destroying an s ");
    S* s = new S;
    delete s;
    puts(" creating & destroying S[3] ");
    S* sa = new S[3];
    delete []sa;
}
