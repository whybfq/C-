#include <cstdio>
#include <iostream>
using namespace std;


/*********************************************************************************
  *FileName:  The_whole_arrangement(全排列显示）
  *Author:  W
  *Version:  **
  *Date:  2018-06-01
  *Description:  输入一个数n,计算n的全排列并且全部显示。主要使用dfs思想。
                 假设有n个盒子，依次往其中放入编号1～n的扑克牌，则放到n+1时，
                 输出盒子中的扑克牌编号就是一种排列。
                 先按照顺序放置扑克牌，第一遍放完后，返回回收扑克牌，继续重新放置。（DFS思想）
  *Others:  数组a表示小盒子
  *Function List:  
     1. void dfs(int step) 
        step          --表示当前所在的盒子，
        a[ste[]=i     --将第i号扑克牌放入到第step个盒子中 
        book数组       --用来标记扑克牌是否还在手上。
  *History:  //修改历史记录列表，每条修改记录应包含修改日期、修改者及修改内容简介
     1.Date:
       Author:
       Modification:
     2.…………
**********************************************************************************/


int a[10]={0};
int book[10]={0};
int n;   //The global variable

void dfs(int step){  //step if shows where you are before the box  step表示现在站在第几个盒子面前
    int i;
    if(step == n+1)  //如果站在第n+1个盒子面前， 则表示前n个盒子已经放好扑克牌
    {
        //输出一种排列（1～n号盒子的扑克牌编号）
        for(int i = 1; i <= n; ++i)
            cout<<a[i];
        cout<<endl;
        return;  //返回之前的一步（最近一次调用dfs函数的地方）
    }

    //此时站在第step个盒子面前，应该放哪张牌呢？
    //按照1，2，3...n的顺序一一尝试
    for(int i=1; i <= n; ++i){
        //判断扑克牌i是否还在手上
        if(book[i] == 0)   //book[i]等于0表示i号扑克牌在手上
        {
            //开始尝试使用扑克牌i
            a[step] = i;  //put number i card into step box 将i号扑克牌放入到第step个盒子中
            book[i] = 1;  //It shows that nuber i card is not on hand   表示i号扑克牌已经不再手上
    
            //第step个盒子放好了扑克牌，往下走
            dfs(step+1);  
            book[i]=0;   //Take back the card that sends out 将刚才尝试的扑克牌收回，继续进行下一次尝试
        }
    }
}

int main(){
    cin>>n;   //  n>=1 && n<=9
    dfs(1);   //from the number 1 box 首先站在1号小盒子面前
    getchar;
}
