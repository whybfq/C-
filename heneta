//the question of heneta:

using recursion:
(exceptional case:)
T0 = 0； T1= 1 ； T2 = 3；

首先把n-1个小的圆盘移到一个不同的桩上，（need Tn-1 move)  First, (the smaller) n-1 --> the different pillar from the end pillar (Tn-1)
移动最大的圆盘 （ 1 move)  Second, move the biggest 
最后，把 n-1个小圆盘移回到最大的圆盘上面 （Tn-1 move)  End, move the smaller n-1 --> above the biggest one ( Tn-1)
so, Tn <= 2Tn-1 + 1  , n > 0                                 ------------1
( ==> 2Tn-1 + 1 times move is enough)

Does there have better ways to move? None.
We have to move the biggest one, and the n-1 smaller one must in one another pillar, and it need at least Tn-1 move. Moreover,
if we are not very clear, we may need more times(>1) to move the biggest one. Besides, after we move the biggest, we have to move the 
smaller(it needs Tn-1), so 

Tnn >= Tn-1+1,  n>0                                       --------2
From the 1 as well as 2
===> Tn = 2Tn-1 + 1 , n > 0                     this is a recursion

From mathematical induction we can get Tn=2^n -1 , n>=0   == > Tn=2Tn-1 + 1 = 2(2^(n-1-1)) + 1 = 2^n -1

Does there have better ways to calculate? Yes

T0 + 1 = 1 ;
Tn + 1 = 2Tn-1 + 2 , n > 0

let Un = Tn + 1
then U0 = 1;
Un = 2Un-1;

==> Un = 2^n;     
==> Tn = 2^n - 1 ; 

#include<cstdio>
#include<cstdlib>

void hano(int n, char x, char y, char z){

    if(n == 0){  ;  } //do nothiin
    else
    {
        hano(n-1, x, z , y);
        cout<<x<<"->"<<y<<endl;
        hano(n-1,z  ,y, x);
    }

};

int main(){
    hano(6,'A','B','C');
    return EXIT_SUCCESS;
}
