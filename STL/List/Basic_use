/*********************************************************************************
  *Author:  San
  *IDE:   Clion 2018.3
  *OS:    macOS High Sierra 10.13
  *Date:  August, 2018
  *Description:     some basic use of list  除了具有顺序容器都有的成员函数之外，还有8个元素,不支持随机存取
  *Bug:
  *Function List:   push_front :  在前面插入
  *                 pop_front : 删除前面的元素
  *                 sort : 排序（ list不支持STL的算法sort)
  *                 remove : 删除和指定值相等的所有元素
  *                 unique: 删除所有和前一个元素相同的元素(要做到元素不重复，则unique之前还需要sort)
  *                 merge: 合并两个链表，并清空被合并的那个
  *                 reverse: 颠倒list
  *                 splice: 在指定位置前插入另一个链表中的一或多个元素，并在另一链表中删除被插入的元素
     1.
  *History:
   1.Date:
     Author:
     Modification:
**********************************************************************************/
#include <algorithm>
#include <iostream>
#include <sstream>   // 内存输入输出  istringstream  ostringstream
#include <stdexcept>
#include <typeinfo>
#include <vector>
#include <queue>
#include <list>
#include <string>

#include <stack>
#include <queue>

using namespace std;

template<class T>
void PrintVector(T s, T e) {
    for(; s != e; ++s) cout << *s << " ";
    cout << endl;
}

template<class T>
void PrintList(const list<T> & lst) {  // not recommend writing, or it would be better to use the two iterator
                                       // parameters in Printvector()
    int tmp = lst.size();
    if(tmp > 0) {
        typename list<T>:: const_iterator i; // typename用来说明list<T>::const iterator是个类型
        i = lst.begin();
        for ( i = lst.begin()  ; i != lst.end() ; i++) {
            cout << *i << ", ";
        }
    }
    cout << endl;
}

class A {
public:
        A(int n_) : n(n_) { }
        friend bool operator < (const A &a1,const A &a2) { return a1.n < a2.n; }
        friend bool operator == (const A &a1,const A &a2);
        friend ostream & operator << (ostream & o, const A & a){ o << a.n; return o; }

private:
        int n;
};

bool operator==(const A &a1, const A &a2) {
    return a1.n == a2.n;
}

int main(int argc, char const *argv[]) {
    list<A> lst1,lst2;
    lst1.push_back(1);  lst1.push_back(2); lst1.push_back(3); lst1.push_back(2);
    lst2.push_back(30);
    lst2.push_back(20);
    lst2.push_back(10);
    cout << "1) "; PrintList( lst1); //1) 1, 2, 3, 2,

    lst2.sort();
    cout << "2) "; PrintList(lst2);  // 2) 10, 20, 30,
    lst2.pop_front();
    cout << "3) "; PrintList(lst2);  // 3) 20, 30,

    lst1.remove(2);  // 删除所有和A(2)相等的元素
    cout << "4） ";  PrintList(lst1);  // 4) 1,3,

    lst2.unique();  // 删除所有和前一个元素相等的元素  5) 20, 3
    cout << "5) ";  PrintList(lst2) ;  // 5) 20, 30,

    lst2.merge(lst1);  // 合并lst1到lst2 并清空lst1
    cout << "6) " ;  PrintList(lst2);   // 6) 1, 3, 20, 30,
    lst2.reverse();  // 前后颠倒
    cout << "7) "; PrintList(lst2);   // 7) 30, 20, 3, 1,

    lst1.push_back(1);  lst1.push_back(2); lst1.push_back(3); lst1.push_back(2);
    list<A>::iterator p1,p2,p3;
    p1 = find(lst1.begin(),lst1.end(),3);
    p2 = find(lst2.begin(),lst2.end(),20);
    p3 = find(lst2.begin(),lst2.end(),1);
    lst2.splice(p1,lst2,p2,p3);   // 将[p2，p3)插入p1之前，并从lst2中删除[p2,p3)
    cout << "8) "; PrintList(lst1);  // 8) 1, 2, 20, 3, 3, 2,
    cout << "9) "; PrintList(lst2);  // 9) 30, 1,
}

Output:
1) 1, 2, 3, 2, 
2) 10, 20, 30, 
3) 20, 30, 
4） 1, 3, 
5) 20, 30, 
6) 1, 3, 20, 30, 
7) 30, 20, 3, 1, 
8) 1, 2, 20, 3, 3, 2, 
9) 30, 1,
