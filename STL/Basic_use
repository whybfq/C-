/*********************************************************************************
  *Author:  San
  *IDE: Clion 2018.3
  *OS:  macOS High Sierra 10.13.6
  *Date:  August 7,2018
  *Description:  类模板 1） 顺序容器  vector, deque（双向队列）, list（双向列表）
  *                    2)  关联容器  set(不允许相同元素） ,multiset（允许相同元素） , map,multimap   （排序）
  *        元素是排序的，查找时具有良好性能，通常以平衡二叉树实现， 插入和检索 O(log(N))
  *                    3)  容器适配器  stack（栈，后进先出） , queue（队列，先进先出）, priority_queue（优先级队列） 不支持迭代器
      Membership functions in sequential containers and associated containers
         begin     return指向第一个元素的迭代器
         end       return指向最后一个元素后面位置的迭代器
        rbegin     return指向最后一个元素的迭代器
        rend       return指向第一个元素前面位置的迭代器
        erase      删除一个或多个元素
        clear      Delete all elements
  *Bug:
  *Function List:
     1.
  *History:
   1.Date:
     Author:
     Modification:
**********************************************************************************/
#include <iostream>
#include <sstream>   // 内存输入输出  istringstream  ostringstream
#include <stdexcept>
#include <typeinfo>
#include <vector>
#include <queue>
#include <list>
#include <string>

#include <stack>
#include <queue>

using namespace std;

int main(int argc, char const *argv[]) {
     // vector  元素在内存中连续存放
    vector<int> v;   // 一个存放int元素的数组，
    v.push_back(1); v.push_back(2);
//     vector<int>::const_iterator j;
    for (auto j = v.begin() ; j != v.end() ; ++j) {
        cout << *j  << ",";
    } cout << endl;

    vector<int>::reverse_iterator r;  // 反向迭代器
    for (r = v.rbegin() ; r != v.rend() ; ++r) {   //从后往前走
        cout << *r << ",";
    } cout << endl;


    for ( vector<int>::iterator i = v.begin(); i != v.end() ; ++i) {
        *i = 100;    // non -const iterator i
    }

    for(auto i = v.begin(); i!= v.end(); ++i) { cout <<  *i << ","; }
    // deque双向队列  元素在内存连续存放,但是随机存取元素在常数时间（次于vector)，在两端增删元素具有较佳性能（大部分情况下是常数时间）

     //list 双向列表  不支持随机存取
}

Output:
1,2,
2,1,
100,100,
