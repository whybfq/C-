/*********************************************************************************
  *@copyright (C)  Sep 2018  San
  *@brief: 递归函数方式展开参数包  Recursive function method parameter package
  *@CMAKE_CXX_STANDARD 17
  *@IDE: Clion 2018.3
  *@OS:  macOS High Sierra 10.13.6
  *
  *@function_lists:
  *  1.

  *@history:
     1.Date:
       Author:
       Modification:
**********************************************************************************/

#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <functional>
#include <set>
#include <string>
#include <cmath>
#include <memory>
#include <map>
#include <typeinfo>
#include <type_traits>
#include <vector>
using namespace std;

void print(){  // 递归终止函数
    cout << "empty" << endl;
}

template<class T, class ... Args>  // 展开函数
void print(T head, Args... rest){
    cout << "parameter " << head << endl;
    print(rest...);
}

// another way of writing
//template <class T>
//void print(T t){
//    cout << t << endl;
//}

//若是不用终止函数,直接展开，关键是逗号表达式
template<class T, class ... Args>  // 展开函数
void print(T head, Args... rest){  // 处理参数包中每个参数
    cout << "parameter " << head << endl;
    print(rest...);
}

template<class T>
void printarg(T t){ cout << t << endl;}
template<class... Args>
void expand(Args... args){
    int arr[] = { (printarg(args), 0)... };
}

int main(int argc, char const *argv[]) {
    print(1,2,3,4); //print(1,2,3,4); -> print(2,3,4); -> print(3,4);  ->  print(4)
    // expand(1,2,3,4);
}

Output:
parameter 1
parameter 2
parameter 3
parameter 4
empty
