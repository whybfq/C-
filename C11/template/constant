/*********************************************************************************
  *@copyright (C) 2018 san All Rights Reserved
  *@file    
  *@date    Sep 2018
  *@author  san
  *@CMAKE_CXX_STANDARD 17
  *@IDE:    Clion 2018.3
  *@OS:     macOS High Sierra 10.13.6
  *
  *@brief:  模板中的常量，example
  *@function_lists:
  *  1.

  *@warning:
  *@history:
     1.Date:
       Author:
       Mondification:
**********************************************************************************/

#include <iostream>
#include <typeinfo>
using namespace std;

template <class T, int size = 100>
class Array {
public:
    T&operator[](int index) {
        return array[index];
    }
    int length() const { return  size; }
private:
    T array[size];
};

class Number {
private:
    float f;
public:
    Number(float ff = 0.0f) : f(ff) { }
    Number&operator=(const Number& n) {
        f = n.f;
        return *this;
    }
    operator float() const { return f; }
    friend ostream&
            operator<<(ostream& os, const Number& x) {
        return os << x.f;
    }
};

template <class T, int size = 20>
class Holder {
public:
    Holder() : np(0) { }
    ~Holder() { delete np; }
    T&operator[](int i){
        if(!np){
            np = new Array<T,size>;
        }
        return np->operator[](i);
    }
    int length() const { return  size; }

private:
    Array<T, size>*np;
};

int main(int argc, char const *argv[]) {
    Holder<Number> h;
    for (int i = 0; i < 20; ++i) {
        h[i] = i;
    }
    for (int j = 0; j < 20; ++j) {
        cout << h[j] << endl;
    }
}

Output:
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
