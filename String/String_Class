/*********************************************************************************
  *Author:  San
  *IDE: Clion 2018.3
  *OS:  macOS High Sierra 10.13.6
  *Date:  August 7,2018
  *Description:    some basic use of class string

  *Bug:
  *Function List:
     1.
  *History:
   1.Date:
     Author:
     Modification:
**********************************************************************************/
#include <iostream>
#include <sstream>   // 内存输入输出  istringstream  ostringstream
#include <stdexcept>
#include <typeinfo>
#include <vector>
#include <string>
using namespace std;

int main(int argc, char const *argv[]) {
    string s;
    getline(cin ,s);   // read a line
    string s1("catpig"),s2;
    s2.assign(s1);   // 用assign成员函数复制
    cout << s2  << endl;   // catpig
    s2.assign(s1,1,3); // 从s1中下标为1的字符开始复制3个字    部分复制
    cout << s2  << endl;  // atp
    s2[5] = s1[3] = 'a';  // 单个字符赋值  Individual character assignment

    string s3("hi");
    for (int i = 0; i < s3.length(); ++i) {
        cout << s3.at(i) << endl; // at会做范围检查，超出范围会抛出out_of_range异常,下标运算符不做范围检查
    }
    //赋值和连接  Assignment and connection   "+" and append()
    string s4("good "),s5("morning");
    s4.append(s5);
    cout << s4 << endl;  // good morning
    s5.append(s4,3,s4.size()); // 部分连接
    cout << s5  << endl;  // morningd morning

    // 比较
    string s6("hello"),s7("hello"),s8("hell");
    int f1 = s6.compare(s7);   // 0   s6 == s7
    int f2 = s6.compare(s8);   // 1   hello > hell
    int f3 = s8.compare(s6);   // -1  hell  < hello
    cout << s6  << endl;
    int f4 = s6.compare(1,2,s8,0,3);  // s6  1-2 ; s8 0-3   部分比较
    cout << f4  << endl;  // -3
    int f5 = s6.compare(0,s6.size(),s8);   // s6 0-end
    cout << f5  << endl;  // 1  hello > hell

    // 子串 Substring
    string s9("hlwwleiwewerqqw"),s10;
    s10 = s9.substr(4,5);  // 下标从4开始5个字符  The subscript starts 5 characters from 4
    cout << s10  << endl;  // leiwe

    // swap
    s10.swap(s9);
    cout << s9 <<  endl;   // leiwe

    // find()
    cout <<  s9.find("e") << endl;    // Search backward and return the we's first subscript, if not found ,
    // return string::npos(string中定义的静态常量)      // 1
    cout << s9.find("d") << endl;    // not found   18446744073709551615
    cout << s9.find("e",2) << endl;  // 4  下标从2开始找   可以指定查找开始位置

    // find_first_of()
    cout << s9.find_first_of("dwr") << endl; // 3 // 从前向后，返回"dwr"中任意字符第一次出现的地方 if not found, return string::npos
    // find_last_of()
    cout << s9.find_last_of("dwre") << endl;// 4 // 从前向后，返回"dwre"中任意字符最后一次出现的地方 if not found, return string::npos
    // find_first_not_of()
    cout << s9.find_first_not_of("1we") << endl; // o // 从前向后，返回s9中中任意不在"1we"的字符第一次出现的地方if not found, return string::npos
    // find_last_not_of()
    cout << s9.find_last_not_of("1we") << endl; // 2 // 从后往前，返回s9中中任意不在"1we"的字符第一次出现的地方 if not found, return string::npos

    // erase()
    s9.erase(4);  // 从下标为4开始都去掉
    cout << s9  << endl;  // leiw
    cout << s9.length()  << endl;  // 4
    cout << s9.size() << endl;  // 4

    // replace()
    cout << s9  << endl;  // leiw
    s9.replace(2,3,"haha");
    cout << s9  << endl;  // lehaha
    s9.replace(2,3,"weel",1,2);   // 将s9中下标从2开始的3个字符换成"weel"中下标从1开始的2个字符
    cout << s9  << endl;  // leeea

    // insert()
    cout << s10  << endl;  //hlwwleiwewerqqw
    s9.insert(3,s10);  // 将s10插入s9下标3的位置
    cout << s9  << endl; // leehlwwleiwewerqqwea

    s9.insert(2,s10,5,3);  // 将s10中下标5开始的3个字符插入s9下标2的位置
    cout << s9  << endl;  // leeiwehlwwleiwewerqqwea

    // c_str()  return a pointer whose type is const char*, 返回传统的const char*类型的字符串，以"\0"结尾
    cout << s9.c_str() << endl;

    // data()  return a pointer whose type is char *, 返回传 char * 类型的字符串，以"\0"结尾  similar to c_str()
    s10="123";
    const char *p1 = s10.data();
    for (int j = 0; j < s10.length(); ++j) {
        cout << *(p1+j) << endl;
    }

    //字符串流处理
    string input("Input test 123 4.7 A ");
    istringstream inputString(input);  // 流对象inputString 用input初始化
    string string1,string2;
    int i;
    double d;
    char c;
    inputString >> string1 >> string2 >> i >> d >> c;
    cout << string1 << endl << string2 << endl;
    cout << i  << endl << d  << endl << c  << endl;
    long L;
    if(inputString >> L )cout <<"long \n" << endl;
    else cout <<"empty" << endl;

    ostringstream outputString;
    int a = 10;
    outputString << "This " << a << " ok" << endl;  //把输出放到流中，用cout输出
    cout << outputString.str();

}
